"use strict";(self.webpackChunkdevelopers=self.webpackChunkdevelopers||[]).push([[805],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,k=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7985:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const r={title:"Specification"},i=void 0,s={unversionedId:"spec",id:"spec",title:"Specification",description:"This document describes v1.0.0 of the spec, if you are looking for another version.",source:"@site/docs/spec.md",sourceDirName:".",slug:"/spec",permalink:"/developers/docs/spec",draft:!1,editUrl:"https://github.com/connect-org/developers/tree/main/docs/spec.md",tags:[],version:"current",frontMatter:{title:"Specification"},sidebar:"sidebar",previous:{title:"Connect Developer Docs",permalink:"/developers/docs/"}},l={},c=[{value:"1. Conventions",id:"1-conventions",level:2},{value:"2. Encryption",id:"2-encryption",level:2},{value:"3. Messages",id:"3-messages",level:2},{value:"3.1. <code>C</code> to <code>S</code> - <code>C</code> Side",id:"31-c-to-s---c-side",level:3},{value:"3.2. <code>S</code> to <code>R</code> - <code>S</code> Side",id:"32-s-to-r---s-side",level:3},{value:"3.3. <code>C</code> to frontend",id:"33-c-to-frontend",level:3},{value:"4. Chat, Room, and Messages",id:"4-chat-room-and-messages",level:3},{value:"4.1 IDs",id:"41-ids",level:3},{value:"5 API",id:"5-api",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This document describes ",(0,o.kt)("inlineCode",{parentName:"p"},"v1.0.0")," of the spec, if you are looking for another version.\nCheck ","[","TODO","]"),(0,o.kt)("h2",{id:"1-conventions"},"1. Conventions"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"A Server ( Connect Server Node ) is ",(0,o.kt)("inlineCode",{parentName:"li"},"S")),(0,o.kt)("li",{parentName:"ol"},"A Client ( User who uses the Connect website or Desktop app ) is ",(0,o.kt)("inlineCode",{parentName:"li"},"C")),(0,o.kt)("li",{parentName:"ol"},"Rooms are a group of clients, they will be refered to as ",(0,o.kt)("inlineCode",{parentName:"li"},"R")),(0,o.kt)("li",{parentName:"ol"},"A Bot ( An automated client ) is ",(0,o.kt)("inlineCode",{parentName:"li"},"B"))),(0,o.kt)("h2",{id:"2-encryption"},"2. Encryption"),(0,o.kt)("p",null,"Connect will use ",(0,o.kt)("inlineCode",{parentName:"p"},"libsignal-client")," for encryption"),(0,o.kt)("h2",{id:"3-messages"},"3. Messages"),(0,o.kt)("p",null,"Messages are packs of user generated content sent to and from the server and ",(0,o.kt)("inlineCode",{parentName:"p"},"R"),"s"),(0,o.kt)("h3",{id:"31-c-to-s---c-side"},"3.1. ",(0,o.kt)("inlineCode",{parentName:"h3"},"C")," to ",(0,o.kt)("inlineCode",{parentName:"h3"},"S")," - ",(0,o.kt)("inlineCode",{parentName:"h3"},"C")," Side"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// Message is markdown instead HTML as that exposes an XSS vunribility.\nfunction send(room: id, message: markdown) {\n    const M = Encrypt(message, PublicKey);\n    if (!isAuthorizedToSendToThisRoom(user, room)) return;\n    Socket.emit("message", M, room, user);\n}\n')),(0,o.kt)("h3",{id:"32-s-to-r---s-side"},"3.2. ",(0,o.kt)("inlineCode",{parentName:"h3"},"S")," to ",(0,o.kt)("inlineCode",{parentName:"h3"},"R")," - ",(0,o.kt)("inlineCode",{parentName:"h3"},"S")," Side"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'Socket.on("message", (M: encrypedData, room: id, sender: User) => {\n    Socket.brodcast(room, "message", M, sender);\n});\n')),(0,o.kt)("h3",{id:"33-c-to-frontend"},"3.3. ",(0,o.kt)("inlineCode",{parentName:"h3"},"C")," to frontend"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'Socket.on("message", (M: encrypedData, sender: User) => {\n    displayMessage(Decrypt(M), sender);\n});\n')),(0,o.kt)("p",null,"Rooms as referred to as a variable named ",(0,o.kt)("inlineCode",{parentName:"p"},"room")," are a uniqe identifier for a ",(0,o.kt)("inlineCode",{parentName:"p"},"R")),(0,o.kt)("h3",{id:"4-chat-room-and-messages"},"4. Chat, Room, and Messages"),(0,o.kt)("p",null,"Chats are the building block for Connect. Any user can create a Chat.\nThe maximum amount of Chats a user can create is 5."),(0,o.kt)("p",null,"A user can join an unlimited amount of chats as long as those chats exist and the owner's accounts exist."),(0,o.kt)("p",null,"Chats can contain rooms.\nThe maximum limit for # of rooms is 20.\nRooms exist forever as long as the chat exists."),(0,o.kt)("p",null,"Rooms contain messages.\nMessages contain user generated content that is transfered as described in ",(0,o.kt)("a",{parentName:"p",href:"#3-messages"},"3"),".\nMessages are made of a limited version of markdown, it has:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"No headings"),(0,o.kt)("li",{parentName:"ul"},"No HTML"),(0,o.kt)("li",{parentName:"ul"},"Links that represent the URL to prevent scams")),(0,o.kt)("h3",{id:"41-ids"},"4.1 IDs"),(0,o.kt)("p",null,"Chat IDs are an incrementing value\nRoom IDs are ",(0,o.kt)("inlineCode",{parentName:"p"},"[chatID]-[incrementingValue]"),"\nMessage IDs are ",(0,o.kt)("inlineCode",{parentName:"p"},"[roomID]-[incrementingValue]")),(0,o.kt)("h2",{id:"5-api"},"5 API"),(0,o.kt)("p",null,"There are 3 APIs that Connect has:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"App API"),(0,o.kt)("li",{parentName:"ul"},"User API"),(0,o.kt)("li",{parentName:"ul"},"Bot API")),(0,o.kt)("p",null,"The App API is used in the desktop app to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Control window state"),(0,o.kt)("li",{parentName:"ul"},"Save configurations"),(0,o.kt)("li",{parentName:"ul"},"Load & Set themes.")),(0,o.kt)("p",null,"In the web app, it is used for:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Saving configurations"),(0,o.kt)("li",{parentName:"ul"},"Loading and setting themes")),(0,o.kt)("p",null,"The User API is used to do anything on Connect a user could including:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Sending, Recieving, Editing and Deleting Messages"),(0,o.kt)("li",{parentName:"ul"},"Creating Rooms"),(0,o.kt)("li",{parentName:"ul"},"Creating Chats"),(0,o.kt)("li",{parentName:"ul"},"Editing their profile")),(0,o.kt)("p",null,"The Bot API is used to do the following with a bot account:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Send, Recieve, Edit and Delete Messages"),(0,o.kt)("li",{parentName:"ul"},"Recive and post data from API's into Rooms"),(0,o.kt)("li",{parentName:"ul"},"Run user specified commands on ",(0,o.kt)("strong",{parentName:"li"},"non connect servers"))))}d.isMDXComponent=!0}}]);